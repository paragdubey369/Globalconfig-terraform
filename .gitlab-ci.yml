stages:
  - fetch-main
  - check-infra
  - create-infra
  - generate-yml
  - commit-state
  - compare-config
  - ssh-script
  - install-platform
  - destroy-infra

variables:
  ENV_DIR: "environments/dev_m"
  TF_APPROVE: "auto-approve"
  TF_INPUT: "false"
  env: "dev_m.tfvars"

fetch-tfstate:
  stage: fetch-main
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo "Fetching .tfstate from main branch..."
    - git fetch origin main || echo "No state branch yet"
    - git checkout main -- $ENV_DIR/terraform.tfstate || echo "No previous tfstate"
    - git checkout main -- $ENV_DIR/terraform.tfstate.backup || echo "No previous backup"
    # - git checkout main -- $ENV_DIR/inventory.yml
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

check-infra:
  stage: check-infra
  script:
    - echo "Checking for infrastructure state..."
    - git checkout main -- $ENV_DIR/terraform.tfstate 
    - cd $ENV_DIR
    - terraform refresh -var-file="dev_m.tfvars" -input=$TF_INPUT || echo "Refresh failed"
    - |
      if [ -f "terraform.tfstate" ]; then
        RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l)
        echo "Resource count: $RESOURCE_COUNT"
        if [ "$RESOURCE_COUNT" -gt 0 ]; then
          echo "Infrastructure exists. Skipping apply."
          touch infra_exists.flag
          terraform output -json > output.json
        else
          echo "No infrastructure found. Proceeding to create."
        fi
      else
        echo "No terraform.tfstate found. Proceeding to create."
      fi

  artifacts:
    paths:
      - $ENV_DIR/infra_exists.flag
      - $ENV_DIR/output.json
    expire_in: 1 hour

create-infra:
  stage: create-infra
  needs: [check-infra]
  script:
    - |
      if [ -f $ENV_DIR/infra_exists.flag ]; then
        echo "Infra already exists. Skipping apply."
        exit 0
      fi
    - cd $ENV_DIR
    - terraform apply -$TF_APPROVE -input=$TF_INPUT -var-file="dev_m.tfvars" 
    - terraform output -json > output.json
  artifacts:
    paths:
      - $ENV_DIR/terraform.tfstate
      - $ENV_DIR/terraform.tfstate.backup
      - $ENV_DIR/output.json
    expire_in: 2 hours


generate-yml:
  stage: generate-yml
  needs: [create-infra]
  script:
    - python3 environments/json_to_ini.py $ENV_DIR/output.json $ENV_DIR/inventory.yml
  artifacts:
    paths:
      - $ENV_DIR/inventory.yml


commit-state:
  stage: commit-state
  needs: 
    - job: create-infra
      artifacts: true
    - job: generate-yml
      artifacts: true  
  script:
    - echo "Committing updated tfstate to state branch..."
    - git config user.email "paragdubey007@gmail.com"
    - git config user.name "dubeyp"
    - git remote set-url origin "http://dubeyp:glpat-***REDACTED***@gitlab.local/dubeyp/globalconfig.git"
    - git fetch origin main 
    - git checkout -f main || git checkout -b main
    - cp $ENV_DIR/terraform.tfstate .
    - cp $ENV_DIR/terraform.tfstate.backup .
    - cp $ENV_DIR/inventory.yml .
    - git add $ENV_DIR/terraform.tfstate $ENV_DIR/terraform.tfstate.backup $ENV_DIR/inventory.yml 
    - git commit -m "Update tfstate for dev_m [ci skip]" || echo "No changes to commit"
    - git pull --no-rebase origin main
    - git push origin main
  only:
    - main

compare-config:
  stage: compare-config
  needs: [commit-state]
  script:
    - python3 compareini_yml.py
  artifacts:
    when: always
    paths: 
      - comparison_logs/
  only:
    - main

ssh_script:
  stage: ssh-script
  needs: [compare-config]
  script:
    - mkdir -p ~/ .ssh
    - chmod 700 ~/ .ssh
    - cd .ssh
    - cp "$ANSIBLE_SSH_PRIVATE_KEY" > ./id_rsa
    - chmod 600 ~/ ./id_rsa
    - ssh-keyscan -H 172.17.0.30 >> ~/ .ssh/known_hosts
  

install-platform:
  stage: install-platform
  needs: [compare-config]
  script:
    - echo"now installing different components on the vm's"
    - |
      ssh -o StrictHostKeyChecking=no ansible@172.17.0.30 <<'EOF'
        set -ex
        cd /home/ansible/ansible/rke2-airgapped-deployment-hauler-main
        echo "installing rke2"
        ansible-playbook -i inventories/dev_m.yml playbooks/site.yml
      EOF
  only:
    - main

destroy-infra:
  stage: destroy-infra
  script:
    - cd $ENV_DIR
    - terraform destroy -$TF_APPROVE -input=$TF_INPUT -var-file="dev_m.tfvars" 
  when: manual