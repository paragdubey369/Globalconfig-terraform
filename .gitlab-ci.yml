stages:
  - check-infra
  - create-infra
  - generate-yml
  - compare-config
  - install-hauler
  - copy-certificate
  - install-rke2
  - install-haproxy
  - install-mariadb
  - destroy-infra

variables:
  ENV_DIR: "environments/dev_s"
  TF_APPROVE: "auto-approve"
  TF_INPUT: "false"
  TF_env: "dev_s.tfvars"
  COMPARE_ENV: dev_s
  ANSIBLE_ENV: "dev-s.yml"
  STATE_NAME: "infra-$COMPARE_ENV"
  GITLAB_HOST: "https://gitlab.local"
  CI_PROJECT_ID: "590"
  CI_JOB_TOKEN: "glpat-***REDACTED***"


check-infra:
  stage: check-infra
  script:
    - echo "Init remote backend (GitLab) and check changes via planâ€¦"
    - export TF_ADDRESS="$GITLAB_HOST/api/v4/projects/$CI_PROJECT_ID/terraform/state/$STATE_NAME"
    - terraform -chdir="$ENV_DIR" init \
        -backend-config=address="$TF_ADDRESS" \
        -backend-config=lock_address="$TF_ADDRESS/lock" \
        -backend-config=unlock_address="$TF_ADDRESS/lock" \
        -backend-config=lock_method=POST \
        -backend-config=unlock_method=DELETE \
        -backend-config=retry_wait_min=5 \
        -backend-config=username="dubeyp" \
        -backend-config=password="$CI_JOB_TOKEN" \
        -input=false
    - terraform -chdir="$ENV_DIR" validate

    - set +e
    - terraform -chdir="$ENV_DIR" plan -var-file="$TF_env" -out=tf.plan -detailed-exitcode
    - PLAN_RC=$?
    - set -e
    - echo "PLAN_EXIT_CODE=$PLAN_RC" | tee plan.env
    - |
      if [ "$PLAN_RC" = "0" ]; then
        echo "No changes: infra matches desired state."
        terraform -chdir="$ENV_DIR" output -json > output.json
        touch "$ENV_DIR/infra_exists.flag"
      elif [ "$PLAN_RC" = "2" ]; then
        echo "Changes detected: creation/update required."
      else
        echo "terraform plan failed." >&2
        exit 1
      fi
  only:
    - 'triggers'
  artifacts:
    paths:
      - $ENV_DIR/infra_exists.flag
      - $ENV_DIR/output.json
      - $ENV_DIR/tf.plan
    reports:
      dotenv: plan.env
    expire_in: 1 hour


create-infra:
  stage: create-infra
  needs: [check-infra]
  script:
    - source pan.env || true
    - if [ "$PLAN_EXIT_CODE" != "2"]; then
        echo "no changes";
        exit 0;
      fi
    - export TF_ADDRESS="$GITLAB_HOST/api/v4/projects/$CI_PROJECT_ID/terraform/state/$STATE_NAME"
    - terraform -chdir="$ENV_DIR" init \
        -backend-config=address="$TF_ADDRESS" \
        -backend-config=lock_address="$TF_ADDRESS/lock" \
        -backend-config=unlock_address="$TF_ADDRESS/lock" \
        -backend-config=lock_method=POST \
        -backend-config=unlock_method=DELETE \
        -backend-config=retry_wait_min=5 \
        -backend-config=username="dubeyp" \
        -backend-config=password="$CI_JOB_TOKEN" \
        -input=false
    - terraform -chdir="$ENV_DIR" apply -$TF_APPROVE -input=$TF_INPUT tf.plan
    - terraform -chdir="$ENV_DIR" output -json > output.json
  artifacts:
    paths:
      - $ENV_DIR/output.json
    expire_in: 2 hours
  only:
    - 'triggers'
  
generate-yml:
  stage: generate-yml
  # needs: [create-infra]
  script:
    - python3 environments/json_to_ini.py $ENV_DIR/output.json $ENV_DIR/inventory.yml
  artifacts:
    paths:
      - $ENV_DIR/inventory.yml
  only:
    - 'triggers'

compare-config:
  stage: compare-config
  script:
    - python3 compareini_yml.py --env dev_s
  artifacts:
    when: always
    paths: 
      - comparison_logs/
  only:
    - 'triggers'

install-hauler:
  stage: install-hauler
  needs: [compare-config]
  script:
    - echo "now installing different components on the vm's"
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<EOSSH
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<EOF
        set -ex
        cd /home/ansible/ansible/hauler-registry-fileserver-setup-main
        if [[ ! -f "/home/ansible/ansible/hauler-registry-fileserver-setup-main/flags/hauler_installed.flag" ]]; then
          echo "installing hauler"
          ansible-playbook playbooks/site.yml
          mkdir -p /home/ansible/ansible/hauler-registry-fileserver-setup-main/flags/
          touch /home/ansible/ansible/hauler-registry-fileserver-setup-main/flags/hauler_installed.flag
        else
          echo "hauler already installed"
        fi
      EOF
  
  only:
    - 'triggers'

copy-certificate:
  stage: copy-certificate
  needs: [install-hauler]
  script:
    - echo "copying certificate"
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<'EOSSH'
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<'EOF'
        set -ex
        cd /home/ansible/ansible/hauler-registry-fileserver-setup-main/CA-Certs
        cp -f ca.crt /home/ansible/ansible/rke2-airgapped-deployment-hauler-main/cert
        cp -f ca.crt /home/ansible/ansible/haproxy-hauler-playbook-main/cert
        cp -f ca.crt /home/ansible/ansible/mariadb-hauler-community-main/cert
      EOF
  
  only:
    - 'triggers'
        
      
      
  


install-rke2:
  stage: install-rke2
  needs: [copy-certificate]
  script:
    - echo "now installing different components on the vm's"
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<EOSSH
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<EOF
        set -ex
        cd /home/ansible/ansible/rke2-airgapped-deployment-hauler-main
        if [[ ! -f "/home/ansible/ansible/rke2-airgapped-deployment-hauler-main/flags/rke2_installed.flag" ]]; then
          echo "installing rke2"
          ansible-playbook -i inventories/$ANSIBLE_ENV playbooks/site.yml
          mkdir -p /home/ansible/ansible/rke2-airgapped-deployment-hauler-main/flags/
          touch /home/ansible/ansible/rke2-airgapped-deployment-hauler-main/flags/rke2_installed.flag
        else
          echo "rke2 already installed"
        fi
      EOF
  
  only:
    - 'triggers'

 

install-haproxy:
  stage: install-haproxy
  needs: [copy-certificate]
  script:
    - echo "now installing different components on the vm's"
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<EOSSH
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<EOF
        set -ex
        cd /home/ansible/ansible/haproxy-hauler-playbook-main
        if [[ ! -f "/home/ansible/ansible/haproxy-hauler-playbook-main/flags/haproxy_installed.flag" ]]; then
          echo "installing haproxy"
          ansible-playbook -i inventories/$ANSIBLE_ENV playbooks/haproxy.yml
          mkdir -p /home/ansible/ansible/haproxy-hauler-playbook-main/flags/
          touch /home/ansible/ansible/haproxy-hauler-playbook-main/flags/haproxy_installed.flag
        else
          echo "haproxy already installed"
        fi      
      EOF
  
  only:
    - 'triggers'

  

install-mariadb:
  stage: install-mariadb
  needs: [copy-certificate]
  script:
    - echo "now installing different components on the vm's"
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<EOSSH
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<EOF
        set -ex
        cd /home/ansible/ansible/mariadb-hauler-community-main
        if [[ ! -f "/home/ansible/ansible/mariadb-hauler-community-main/flags/mariadb_installed.flag" ]]; then
          echo "installing mariadb"
          ansible-playbook -i inventories/$ANSIBLE_ENV playbooks/site.yml
          mkdir -p /home/ansible/ansible/mariadb-hauler-community-main/flags/
          touch /home/ansible/ansible/mariadb-hauler-community-main/flags/mariadb_installed.flag
        else
          echo "mariadb already installed"
        fi
      EOF
  
  only:
    - 'triggers'

 

destroy-infra:
  stage: destroy-infra
  script:
    - export TF_ADDRESS="$GITLAB_HOST/api/v4/projects/$CI_PROJECT_ID/terraform/state/$STATE_NAME"
    - terraform -chdir="$ENV_DIR" init \
        -backend-config=address="$TF_ADDRESS" \
        -backend-config=lock_address="$TF_ADDRESS/lock" \
        -backend-config=unlock_address="$TF_ADDRESS/lock" \
        -backend-config=lock_method=POST \
        -backend-config=unlock_method=DELETE \
        -backend-config=retry_wait_min=5 \
        -backend-config=username="dubeyp" \
        -backend-config=password="$CI_JOB_TOKEN" \
        -input=false
    - terraform -chdir="$ENV_DIR" destroy -$TF_APPROVE -input=$TF_INPUT -var-file=$TF_env
    - |
      ssh -o StrictHostKeyChecking=no root@gitlab.local <<'EOSSH'
      ssh -o StrictHostKeyChecking=no ansible@priv-172-19-0-30.local <<'EOF'
        rm -f /home/ansible/ansible/hauler-registry-fileserver-setup-main/flags/hauler_installed.flag
        rm -f /home/ansible/ansible/rke2-airgapped-deployment-hauler-main/flags/rke2_installed.flag
        rm -f /home/ansible/ansible/haproxy-hauler-playbook-main/flags/haproxy_installed.flag
        rm -f /home/ansible/ansible/mariadb-hauler-community-main/flags/mariadb_installed.flag
      EOF
  when: manual
  only:
    - 'triggers'
